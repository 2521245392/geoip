name: Build geoip files
on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 4"
  push:
    branches:
      - master
    paths-ignore:
      - ".gitignore"
      - "LICENSE*"
      - "*.md"
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: ./go.mod

      - name: Set variables
        run: |
          echo "TAG_NAME=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
          echo "RELEASE_NAME=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
        shell: bash

      - name: Download GeoLite2 databases
        env:
          LICENSE_KEY: ${{ secrets.MAXMIND_GEOLITE2_LICENSE }}
        run: |
          mkdir -p output
          
          # Download with retry and verification
          download_file() {
            local url=$1
            local output=$2
            local max_attempts=3
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt: Downloading $output"
              if curl -fSL "$url" -o "$output"; then
                # Check if file is not empty
                if [ -s "$output" ]; then
                  echo "Successfully downloaded $output"
                  return 0
                else
                  echo "Downloaded file is empty, retrying..."
                fi
              else
                echo "Download failed, retrying..."
              fi
              attempt=$((attempt + 1))
              sleep 5
            done
            
            echo "Failed to download $output after $max_attempts attempts"
            return 1
          }
          
          download_file "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-ASN&license_key=${LICENSE_KEY}&suffix=tar.gz" "./output/GeoLite2-ASN.tar.gz"
          download_file "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-ASN-CSV&license_key=${LICENSE_KEY}&suffix=zip" "./output/GeoLite2-ASN-CSV.zip"
          download_file "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-Country&license_key=${LICENSE_KEY}&suffix=tar.gz" "./output/GeoLite2-Country.tar.gz"
          download_file "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-Country-CSV&license_key=${LICENSE_KEY}&suffix=zip" "./output/GeoLite2-Country-CSV.zip"
          
          # Verify downloaded files
          echo "Verifying downloaded files..."
          ls -lh ./output/

      - name: Prepare GeoLite2 databases
        run: |
          # Verify files exist and have content
          for file in GeoLite2-ASN.tar.gz GeoLite2-ASN-CSV.zip GeoLite2-Country.tar.gz GeoLite2-Country-CSV.zip; do
            if [ ! -s "./output/$file" ]; then
              echo "Error: $file is missing or empty"
              exit 1
            fi
          done
          
          cp ./output/{*.gz,*.zip} ./
          
          echo "Extracting Country CSV..."
          unzip -q GeoLite2-Country-CSV.zip || { echo "Failed to extract Country CSV"; exit 1; }
          
          echo "Extracting ASN CSV..."
          unzip -q GeoLite2-ASN-CSV.zip || { echo "Failed to extract ASN CSV"; exit 1; }
          
          echo "Extracting Country tar.gz..."
          tar -xzf GeoLite2-Country.tar.gz || { echo "Failed to extract Country tar.gz"; exit 1; }
          
          echo "Extracting ASN tar.gz..."
          tar -xzf GeoLite2-ASN.tar.gz || { echo "Failed to extract ASN tar.gz"; exit 1; }

          cp GeoLite2-Country_*/*.mmdb ./output/
          cp GeoLite2-ASN_*/*.mmdb ./output/
          cp GeoLite2-Country-CSV_*/{GeoLite2-Country-Blocks-*,GeoLite2-Country-Locations-en,GeoLite2-Country-Locations-zh-CN}.csv ./output/
          cp GeoLite2-ASN-CSV_*/*.csv ./output/

          mkdir -p geolite2
          cp GeoLite2-Country-CSV_*/*.csv ./geolite2/
          cp GeoLite2-ASN-CSV_*/*.csv ./geolite2/
          
          echo "Preparation completed successfully"

      - name: Rename databases
        run: |
          cd ./output || exit 1
          mv GeoLite2-Country.mmdb Country.mmdb
          mv GeoLite2-ASN.mmdb ASN.mmdb

      - name: Build geoip files
        run: |
          echo "Skipping custom build, using original GeoLite2 databases"

      - name: Verify mmdb files
        run: |
          cd ./output || exit 1
          go install -v github.com/maxmind/mmdbverify@latest
          for name in $(ls *.mmdb); do
            $(go env GOPATH)/bin/mmdbverify -file ${name}
          done

      - name: Generate sha256 checksum for mmdb files
        run: |
          cd ./output || exit 1
          for name in $(ls *.mmdb); do
            sha256sum ${name} > ./${name}.sha256sum
          done

      - name: Git push assets to "release" branch
        run: |
          cd output || exit 1
          git init
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b release
          git add -A
          git commit -m "${{ env.RELEASE_NAME }}"
          git remote add geoip "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f -u geoip release

      - name: Purge jsdelivr CDN
        run: |
          cd output || exit 1
          for file in $(ls); do
            curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}@release/${file}"
          done

      - name: Remove some files to avoid publishing to GitHub release
        run: |
          rm -rf ./output/*.{gz,zip}
          rm -rf ./output/GeoLite2-*.csv

      - name: Upload files to GitHub release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: ./output/*
          release_name: ${{ env.RELEASE_NAME }}
          tag: ${{ env.TAG_NAME }}
